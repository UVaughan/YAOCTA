@page "/"
@inject IUriHelper UriHelper
<div class="jumbotron">
    <h1 class="display-4">Minimalist OC Transpo App</h1>
</div>
<div class="input-group mb-3">
    <input type="search"
           class="form-control"
           placeholder="Search by name or stop number..."
           aria-label="Search"
           aria-describedby="basic-addon1"
           @bind-value="searchTerm" />
</div>
@if (filtered != null)
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th scope="col">Stop #</th>
                <th scope="col">Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var key in display)
            {
                <tr>
                    <th scope="row">@key.ToString()</th>
                    <td><NavLink href="@String.Format("stops/{0}", key.ToString())">@stops[key]</NavLink></td>
                </tr>
            }
        </tbody>
    </table>
    @if (display.Count() < filtered.Count())
    {
        <button type="button" class="btn btn-outline-dark" @onclick="LoadMore">Load More</button>
    }
}
else
{
    <p><em>No results found</em></p>
}

@code {
    public const int incrementNumber = 10;

    private int currentSize = 0;

    public IDictionary<int, string> stops;

    public IEnumerable<int> filtered => stops.Where(pair =>
    {
        if (pair.Value.ToLowerInvariant().Contains(searchTerm.ToLowerInvariant()))
        {
            return true;
        }
        if (Int32.TryParse(searchTerm, out var searchKey))
        {
            if (pair.Key.Equals(searchKey))
            {
                return true;
            }
        };
        return false;
    }).Select(x => x.Key);

    public IEnumerable<int> display => filtered.Take(currentSize);

    public IDictionary<int, int> importance = new Dictionary<int, int>();

    private string searchTerm { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var dict = new Dictionary<int, string>();
        var assembly = Assembly.GetExecutingAssembly();
        var resourceName = assembly.GetManifestResourceNames().Single(str => str.EndsWith("stops.txt"));

        using (var stream = assembly.GetManifestResourceStream(resourceName))
        using (var reader = new StreamReader(stream))
        {
            var result = reader.ReadToEnd();
            var lines = result.Split(
            new[] { "\r\n", "\r", "\n" },
            StringSplitOptions.None
            );
            lines = lines.Skip(1).ToArray();
            foreach (var line in lines)
            {
                if (line == "")
                {
                    continue;
                }
                var terms = line.Split(',');
                try
                {
                    var key = Int32.Parse(terms[1]);
                    var value = StringManipulation.FormatStopName(terms[2]);

                    if (dict.ContainsKey(key))
                    {
                        continue;
                    }

                    dict.Add(key, value);
                }
                catch (FormatException e)
                {
                    Console.WriteLine("Could not extract integer from " + terms[1]);
                }
            }
            stops = dict;
            currentSize += incrementNumber;
        }
    }

    private void LoadMore()
    {
        var incAmount = ((display.Count() + incrementNumber) > stops.Keys.Count()) ? (stops.Keys.Count() - display.Count()) : incrementNumber;
        currentSize += incAmount;
    }
}
