@page "/stops/{stopNumber:int}"
@inject HttpClient Http

@if (stop == null)
{
    <p><em>@state</em></p>
}
else
{
    <div class="jumbotron">
        <h1 class="display-4">@stop.StopDescription</h1>
    </div>
    @if (stop.Routes.Route.Count == 0)
    {
        <p><em>No service</em></p>
    }
    else
    {
        @foreach (var route in stop.Routes.Route)
        {

            @if (route.Trips.Count > 0)
            {
                <div class="card" style="width: 40%;">
                    <div class="card-header">
                        @route.RouteNo @route.Direction to @route.RouteHeading
                    </div>
                    <div class="card-body">
                        <ul class="list-group">
                            @foreach (var trip in route.Trips)
                            {
                                <li class="list-group-item">@GetTripMessage(trip)</li>
                            }
                        </ul>
                    </div>
                </div>

            }
        }
    }
}

@code {
    [Parameter]
    public int stopNumber { get; set; }

    public BusStop stop;

    public string state = "Loading data...";

    // constants for http requests, will probably be abstracted into own class
    private const string corsOverride = "https://cors-anywhere.herokuapp.com";
    private const string apiEndpoint = "https://api.octranspo1.com/v1.3";
    private const string appId = "da9f743d";
    private const string apiKey = "b9f53f3f55876acad1d5c2b67fe41233";

    private const string shortBus = "Single bus";
    private const string longBus = "Stretch bus";
    private const string tallBus = "Double decker";
    private const string unknown = "Unknown";

    private const string stopNumberParameter = "stopNo";

    protected override async Task OnInitializedAsync()
    {
        var parameters = new Dictionary<string, string>();
        parameters.Add(stopNumberParameter, stopNumber.ToString());
        try
        {
            stop = (await SendRequest<RouteSummaryForStopWrapper>("GetNextTripsForStopAllRoutes", parameters)).GetRouteSummaryForStopResult;
        }
        catch (Exception e)
        {
            state = "Could not reach OC Transpo servers";
        }
    }

    public async Task<T> SendRequest<T>(string endpoint, IDictionary<string, string> parameters)
    {
        var requestUri = String.Format("{0}/{1}/{2}?appID={3}&apiKey={4}&format=JSON", corsOverride, apiEndpoint, endpoint, appId, apiKey);
        foreach (var key in parameters.Keys)
        {
            requestUri += String.Format("&{0}={1}", key, parameters[key]);
        }
        var response = await Http.PostAsync(requestUri, new StringContent(""));
        if (response.StatusCode == HttpStatusCode.OK)
        {
            return JsonConvert.DeserializeObject<T>(response.Content.ReadAsStringAsync().Result);
        }
        else
        {
            throw new Exception();
        }
    }

    public string GetTripMessage(Trip trip)
    {
        return GetBusType(trip) + " " + trip.AdjustedScheduleTime + " minutes away" + (trip.AdjustmentAge != "-1" ? (" by GPS, moving at " + trip.GPSSpeed + " kph") : "");
    }

    public string GetBusType(Trip trip)
    {
        if(trip.BusType.Length == 0)
        {
            return unknown;
        }
        switch (trip.BusType[0])
        {
            case '4':
                return trip.BusType.Contains("DD") ? tallBus : shortBus;
            case '6':
                return longBus;
            case 'D':
                return tallBus;
            default:
                return trip.BusType.Contains("DD") ? tallBus : unknown;
        }
    }
}
